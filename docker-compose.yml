version: '3'

networks:
  broker_network:
    driver: bridge

services:
  mysql:
    image: mysql
    ports:
      - 3306:3306
    volumes:
    #   - ./:/docker-entrypoint-initdb.d
      - /opt/mysql_data:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_DATABASE=keycloak
      - MYSQL_USER=keycloak
      - MYSQL_PASSWORD=root
    networks:
      - broker_network
    restart: always
  
  redis:
    image: redis:latest
    ports:
      - 5007:6379
    depends_on:
      - mysql
    networks:
      - broker_network
    restart: always

  keycloak:
    image: jboss/keycloak:latest
    volumes:
      - ./data-keycloak.json:/opt/jboss/keycloak/data-keycloak.json
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/data-keycloak.json
      - DB_VENDOR=H2
      - DB_DATABASE=keycloak
      - DB_USER=keycloak
      - DB_PASSWORD=root
    ports:
      - 8080:8080
    depends_on:
      - redis
    networks:
      - broker_network
    restart: always

  mongo:
    image: mongo
    # environment:
    #   MONGO_INITDB_ROOT_USERNAME: root
    #   MONGO_INITDB_ROOT_PASSWORD: root
    ports:
      - "27017:27017"
    volumes:
      - /home/mongodb:/data/db
    depends_on:
      - keycloak
    networks:
      - broker_network
    restart: always


  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - '2181:2181'
    networks:
      - broker_network
    depends_on:
      - mongo
    restart: always


  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - '9092:9092'
    environment:
      KAFKA_ADVERTISED_HOST_NAME: 172.17.0.1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CREATE_TOPICS: 'create-user:1:1, find-all-user:1:1, find-user:1:1'
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_DELETE_TOPIC_ENABLE: "true"
      KAFKA_TOPIC_METADATA_REFRESH_INTERVAL_MS: "60000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zookeeper
    networks:
      - broker_network
    restart: always


  notification-engine:
    build:
      context: ./notification-engine
      dockerfile: Dockerfile.dev
    container_name: notification_engine
    command: yarn start
    environment:
        NODE_ENV: staging
    ports:
        - "3002:3002"
    depends_on:
      - kafka
    networks:
      - broker_network
    restart: always

  
  book-engine:
    build:
      context: ./book-engine
      dockerfile: Dockerfile.dev
    container_name: book_engine
    command: yarn start
    environment:
      NODE_ENV: staging
      REDIS_BASE_URL: 172.17.0.1
      REDIS_PORT: 5007
    ports:
        - "3001:3001"
    depends_on:
      - notification-engine
    networks:
      - broker_network
    restart: always


  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile.dev
    container_name: api_gateway
    command: yarn start
    environment:
      NODE_ENV: staging
      PORT: 3000
      KEY_CLOAK_URI: http://host.docker.internal:8080
      KEY_CLOAK_REALM: microservices
      KEY_CLOAK_CLIENT_ID: micro-services
      KEY_CLOAK_GRANT_TYPE: password
      KEY_CLOAK_CLIENT_SECRET: WJ7wDl3lp4qottXd2w4x8hWNHB9A6rHd
      KEY_CLOAK_REALM_PUBLIC_KEY: MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAjOl1VNh3uBkRrPSiZNJEvYG1yosZdyCrj63oPzPmB1S6tgDxACpIshgOlO7yKP0khE79IYhTZjD6PmcZ0ffF6QMrMvMox2jopM2rmSw7AOybTmeFXWhncYwWSP8x5hYcij1hqIWiy5wRu8CkRhjaE2ucFEoyxCJ24zFyBe5UFa76whGN4nrteQvZCVu81gPgqUZiZU5h+R/iuSy5nFsTdkwRenRJ7/DtMmLQlk3mrmK0K0v2oWQ0RgPIqndAGcahNbx5b4udMMAqg4TBVLPOMu0bsdI6Cp7dmI+sFfW5CVKmkZ5VerumGEPhJHunNhJVqyRgfUVVrH8Ceiuzta8PDQIDAQAB
    ports:
      - '3000:3000'
    networks:
      - broker_network
    depends_on:
      - book-engine
    restart: always


  socket:
    build:
      context: ./socket
      dockerfile: Dockerfile.dev
    container_name: socket
    command: yarn start
    environment:
      NODE_ENV: staging
      PORT: 3005
    ports:
      - '3005:3005'
    networks:
      - broker_network
    depends_on:
      - api-gateway
    restart: always


  flaming-engine:
    build:
      context: ./flaming-engine
      dockerfile: Dockerfile.dev
    container_name: flaming_engine
    command: yarn start
    environment:
      NODE_ENV: staging
      PORT: 3006
    ports:
      - '3006:3006'
    networks:
      - broker_network
    depends_on:
      - socket
    restart: always